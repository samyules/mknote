#!/usr/bin/env bash
# vim: ft=bash

NOTES_PATH="$HOME/.notes/"

if [ ! -d $NOTES_PATH ] ; then
  printf "Welcome to mknote!\n"
  printf "You don't have a folder to keep your notes in.\nWould you like to create a folder in $NOTES_PATH?"
  gum confirm "Create folder?" && mkdir -p $NOTES_PATH || echo "The notes folder is required. Please come back again."
fi

if [ -z $EDITOR ] ; then
  mknote_editor=nvim
else
  mknote_editor=$EDITOR
fi

function usage () {
    local name=$(basename $0)
    cat <<EOUSAGE

$name is a command line tool for taking notes

Usage:
    $name <name of note>    Creates a new note
    $name -c                Choose a note
    $name -f                grep notes
    $name -h                show help message

Your notes directory is $NOTES_PATH. You can override this by changing the NOTES_PATH variable in the program script.

EOUSAGE
}

choose_note () {
    declare -A filenames
    
    termwidth=$(stty size | awk '{print $2}')
    foldwidth=$(($termwidth - 16))

    files=$(ls "$NOTES_PATH")

    for f in $files; do
        file=$(echo $f | cut -d "." -f 1 | sed 's/_/ /g' | cut -d " " -f 2- )
        filenames[$f]="$file"
    done    

    selection=$( printf '%s\n' "${filenames[@]}" | gum choose )
    for f in ${!filenames[@]}; do
        if [[ "${filenames[$f]}" == "$selection" ]]; then
            select="$f"
            fold -w $foldwidth -s "$NOTES_PATH""$select" | bat -l md
            exit 1
        fi
    done
}

function find_note () {
  local file

  file="$(find $HOME/.notes -iname '*.md' -exec basename -s .md {} \; | sort -r | fzf --bind 'J:preview-down,K:preview-up' --height 100% --preview 'if file -i {}|grep -q binary; then file -b {}; else glow -s dark $HOME/.notes/{}.md; fi')"

  if [[ -n $file ]]; then
     $mknote_editor $HOME/.notes/"$file".md
  fi
}

while getopts :hcfn opt
do
    case $opt in
        c)
            choose_note
            exit 2
            ;;
        f)
            find_note
            exit 2
            ;;
        n)
            echo "You want to create a new note."
            exit 2
            ;;
        h)
            usage
            exit 1
            ;;
        *)
            echo "Invalid option: -$OPTARG" >&2
            usage
            exit 2
            ;;
    esac
done

# pass remaining arguments into the script after options have been parsed.
shift $((OPTIND - 1))
FILE="$@"

function new_note () {
    date=$(date +"%Y%m%dT%H%M%S")
    file=${FILE// /_}
    file=$(echo _$file)
    filename=$(echo "$date""$file")
    echo "#${file//_/ }" >> $HOME/.notes/$filename.md
    $mknote_editor $HOME/.notes/$filename.md
}    



if [ $# -eq 0 ]; then
    usage
else
    new_note
fi

